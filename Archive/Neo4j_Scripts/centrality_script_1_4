CALL gds.graph.project('myGraph', ['Normal', 'Hyperglycemia', 'Hypoglycemia'], ['SAMPLE', 'GRID'])

CALL gds.closeness.stream('myGraph')
YIELD nodeId, score
RETURN gds.util.asNode(nodeId).Node_ID AS Name, score
ORDER BY score DESC

## Triangle Count

CALL gds.graph.project(
  'TriGraph',
  ['Normal', 'Hypoglycemia', 'Hyperglycemia'],
  {
    SAMPLE: {
      orientation: 'UNDIRECTED'
    },
    GRID: {
      orientation: 'UNDIRECTED'
    }
  }
)

CALL gds.triangleCount.stream('TriGraph')
YIELD nodeId, triangleCount
RETURN nodeId, triangleCount
ORDER BY triangleCount DESC

## Exosome Peak Graph DMBS 1.4

## Betweenness Centrality

CALL gds.graph.project('BetweenGraph', ['Normal', 'Hypoglycemia', 'Hyperglycemia'], {SAMPLE: {properties: 'DIST'}, GRID: {properties: 'DIST'}})


CALL gds.betweenness.stream('BetweenGraph')
YIELD nodeId, score
RETURN gds.util.asNode(nodeId).Node_ID AS Name, score
ORDER BY Name ASC